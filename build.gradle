plugins {
    id 'base'
    id 'maven-publish'
    id "com.github.node-gradle.node" version "7.0.2"
    id 'com.netflix.nebula.deb' version '11.3.0'
}

group = 'uk.badamson.mc'
version = '3.3.11'
description = 'MC-front-end'
def dockerImage = "benedictadamson/mc-front-end-srv:${project.version}"

def releasesRepoUrl = 'http://thegn:8081/releases/'
def snapshotsRepoUrl = 'http://thegn:8081/snapshots/'

repositories {
    mavenLocal()
    maven {
        url releasesRepoUrl
        allowInsecureProtocol = true
    }
    maven {
        url snapshotsRepoUrl
        allowInsecureProtocol = true
    }
    mavenCentral()
}

node {
    download = true
    version = "18.18.0"
    npmVersion = "8.19.4"
    nodeProjectDir = file("${project.projectDir}/src/main/web/mc-front-end")
}

tasks.npm_install {
}
tasks.npm_run_build {
    inputs.files fileTree("${project.projectDir}/src/main/web/mc-front-end")
    outputs.dir "${project.projectDir}/build/ng-dist"
}


tasks.register('packageNpmApp', Tar) {
    dependsOn npm_run_build
    archiveBaseName = 'MC-font-end'
    archiveClassifier = 'client'
    archiveExtension = 'tgz'
    compression = Compression.GZIP
    destinationDirectory = file("${projectDir}/build")
    into("MC-front-end-${version}")
    from fileTree("${project.projectDir}/build/ng-dist/mc-front-end")
}

tasks.register('testNpm', NpmTask) {
    group = 'Verification'
    dependsOn assemble
    args = ['run', 'test-headless']

    inputs.files fileTree("${project.projectDir}/src/main/web/mc-front-end")
}

String debVersion = (version as String).replace('-SNAPSHOT', '')
int debRelease = (version as String).contains('-SNAPSHOT')? 1 : 2
tasks.register('packageDeb', Deb) {
    inputs.property('debVersion', debVersion)
    inputs.property('debRelease', debRelease)
    dependsOn npm_run_build

    group = 'Publishing'
    packageName = 'missioncommand-fe'
    version = debVersion
    release = debRelease
    priority = 'optional'
    maintainer = 'Benedict Adamson <badamson@spamcop.net>'
    description = 'front-end of the MC game server'
    distribution = 'stable'

    preInstall file('src/deb/control/preinst')
    postInstall file('src/deb/control/postinst')
    preUninstall file('src/deb/control/prerm')

    requires('nginx')

    into '/usr'

    from(fileTree("src/main/resources/etc/nginx/conf.d")) {
        into '/usr/share/missioncommand-fe/etc'
    }
    from(fileTree("${project.projectDir}/build/ng-dist/mc-front-end")) {
        into '/usr/share/missioncommand-fe/html'
    }
}

tasks.register('prepareDockerBuildContext', Copy) {
    group = 'Publishing'
    dependsOn 'packageDeb'
    from 'src/main/docker/Dockerfile'
    from(packageDeb.outputs.files) {
        include '*.deb'
        rename 'missioncommand-fe_.*_all.deb', 'missioncommand-fe.deb'
    }
    into "${project.buildDir}/docker/context"
}
tasks.register('buildDockerImage', Exec) {
    inputs.property('dockerImage', dockerImage)

    group = 'Publishing'
    dependsOn 'prepareDockerBuildContext'
    commandLine 'docker', 'build', '--tag', dockerImage, "${project.buildDir}/docker/context"
}
tasks.register('loginDockerHub', Exec) {
    def credentials = providers.credentials(PasswordCredentials, 'dockerhub').get()
    standardInput = new ByteArrayInputStream(credentials.password.bytes)
    commandLine 'docker', 'login', '--username', credentials.username, '--password-stdin'
}
tasks.register('pushDockerImage', Exec) {
    group = 'Publishing'
    dependsOn 'buildDockerImage'
    dependsOn 'loginDockerHub'
    commandLine 'docker', 'image', 'push', dockerImage
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(packageNpmApp)
            pom {
                organization {
                    name = 'Benedict Adamson'
                }
                licenses {
                    license {
                        name = 'GNU Affero General Public License, Version 3'
                        url = 'https://www.gnu.org/licenses/agpl.html'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:BenedictAdamson/MC-front-end.git'
                    developerConnection = 'scm:git:git@github.com:BenedictAdamson/MC-front-end.git'
                    url = 'https://github.com/BenedictAdamson/MC-front-end'
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = true
            credentials(PasswordCredentials)
        }
    }
}

assemble.dependsOn packageNpmApp
check.dependsOn testNpm

configurations {
    npmResources
}

configurations.default.extendsFrom(configurations.npmResources)

artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type "jar"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
