plugins {
    id 'base'
    id 'maven-publish'
    id "com.github.node-gradle.node" version "7.0.2"
    id 'com.netflix.nebula.deb' version '11.3.0'
}

group = 'uk.badamson.mc'
version = '3.3.3-SNAPSHOT'
description = 'MC-front-end'

def releasesRepoUrl = 'http://thegn:8081/releases/'
def snapshotsRepoUrl = 'http://thegn:8081/snapshots/'

repositories {
    mavenLocal()
    maven {
        url releasesRepoUrl
        allowInsecureProtocol = true
    }
    maven {
        url snapshotsRepoUrl
        allowInsecureProtocol = true
    }
    mavenCentral()
}

node {
    version = "v16.15.0"
    npmVersion = "8.5.5"
    nodeProjectDir = file("${project.projectDir}/src/main/web/mc-front-end")
}

tasks.npm_install {
}
tasks.npm_run_build {
    inputs.files fileTree("${project.projectDir}/src/main/web/mc-front-end")
    outputs.dir "${project.projectDir}/build/ng-dist"
}


tasks.register('packageNpmApp', Tar) {
    dependsOn npm_run_build
    archiveBaseName = 'MC-font-end'
    archiveAppendix = 'client'
    archiveExtension = 'tgz'
    compression = Compression.GZIP
    destinationDirectory = file("${projectDir}/build")
    into("MC-front-end-${version}")
    from fileTree("${project.projectDir}/build/ng-dist/mc-front-end")
}

String testsExecutedMarkerName = "${projectDir}/build/.tests.executed"
tasks.register('testNpm', NpmTask) {
    group = 'Verification'
    dependsOn assemble
    args = ['run', 'test-headless']

    inputs.files fileTree("${project.projectDir}/src/main/web/mc-front-end")

    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}

tasks.register('packageDeb', Deb) {
    dependsOn npm_run_build
    group = 'Publishing'
    packageName = 'missioncommand-fe'
    version = (project.version as String).replace('-SNAPSHOT', '')
    release = 1
    priority = 'optional'
    maintainer = 'Benedict Adamson <badamson@spamcop.net>'
    description = 'front-end of the MC game server'
    distribution = 'stable'

    preInstall file('src/deb/control/preinst')
    postInstall file('src/deb/control/postinst')
    preUninstall file('src/deb/control/prerm')

    requires('nginx')

    into '/usr'

    from(fileTree("src/main/resources/etc/nginx/conf.d")) {
        into '/usr/share/missioncommand-fe/etc'
    }
    from(fileTree("${project.projectDir}/build/ng-dist/mc-front-end")) {
        into '/usr/share/missioncommand-fe/html'
    }
}

assemble.dependsOn packageNpmApp
check.dependsOn testNpm

configurations {
    npmResources
}

configurations.default.extendsFrom(configurations.npmResources)

artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type "jar"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
